코딩 애플 part2 AJAX

(8강)

	삭제 요청

DELETE 요청을 사용하는것이 좋다.
하지만 HTML상에서는 DELETE와 PUT요청을 사용할 수 없다.

	해결 방법
1.method-override 라이브러리 이용 (Node.js에서 사용. form에서 DELETE요청이 가능해짐)
2.Javascript AJAX를 이용(서버를 만들때 꼭 사용함)

	AJAX란
새로고침 없이 서버에 요청하는걸 도와주는 JS문법.
서버랑 통신할 수 있게 도와주는 JS문법

	JQuery를 이용한 AJAX

CDN 방식 : <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>

	하단에 $.ajax : ajax함수
	<script>
		
		$.ajax({
			method : 'DELETE',
			url : '요청할 경로',
			data : '요청과 함께 보낼 데이터'
		})
		
	</script>

	
	<script>
		
		$.ajax({
			method : 'DELETE',
			url : '/delete',
			data : '게시물번호'
		}).done(function(result){
			요청이 성공하면 할거
		}).fail(function(err){
			실패시 할거
		});
		
	</script>

	서버측

app.delete('/delete',function(req,res){
	console.log(req.body) ---> 요청받은 데이터
}); 

(9강)
Ajax로 삭제요청하기2

	deleteOne({ query문 }, function(err , result){ })


	데이터를 주고 받을 때 숫자가 문자로 치환되는 경우가 있음

parseInt( ) : 문자를 정수로 변환. 
	
app.delete('/delete',function(req,res){
	console.log(req.body);
	req.body._id = parseInt(req.body._id);
	db.collection('post').deleteOne(req.body,function(err,result){
		console.log('삭제완료')
	});
}); 

	버튼에 이벤트 연동

$('.delete').click(function(){
			
})	

클래스가 delete인 요소를 클릭하면 내부 코드를 실행


	X번 버튼 누를 시 X번 게시물 삭제

1.버튼마다 번호달기
<button>태그에 data-id로 db의 아이디 부여.
<%= posts[i]._id %>

2.클릭한 버튼의 id를 파악

$('.delete').click(function(e){
	var 글번호 = e.target.dataset.id;  ---> e.target = 내가 누른 요소 .dataset.id = 해당 요소의 data-id값
			
	$.ajax({
		method : 'DELETE',
		url : '/delete',
		data : {_id :글번호}
	}).done(function(result){

	});
			
});

	AJAX는 새로고침 없이 서버에게 요청하는거.

=> 클라이언트가 성공했는지 모름

해결방법

1.AJAX성공시 페이지 강제 새로고침
2.삭제버튼을 누른 <li> 요소를 제거/안보이게(눈속임)


(9강)
AJAX로 삭제요청하기 3 (jQuery를 이용한 UI 기능) & 여러가지 응답방법

	요청이 성공했는지 확인

서버측-

res.status(200) -->성공. 400 : 고객 잘못으로 요청실패. 500 : 서버문제로 요청실패.
res.status(200).send({ message : '성공했습니다' }); --> 응답코드와 응답 메세지를 전송.

브라우저 측 -

		$('.delete').click(function(e){
			var 글번호 = e.target.dataset.id;
			
			$.ajax({
				method : 'DELETE',
				url : '/delete',
				data : {_id :글번호}
			}).done(function(result){
				console.log('성공')
			}).fail(function(result){
				
			});
			
		})


	삭제 후 UI 처리

1. 강제 리로드
location.reload( ) : JQuery 함수

2.해당 글 HTML 삭제
$(this) : JQuery에서 현재 이벤트가 동작하는 곳을 뜻함. (지금 누르고 있는 버튼의 뜻. 지금 클릭한것)

	e.target vs this
e.target : 지금 클릭한 것
this : 지금 이벤트 동작하는 곳

대부분의 경우 같다.

	.parent()
= ~의 부모 태그를 찾아라

	.fadeOut()
= 서서히 사라지는 애니메이션 (.hide, .slideup)

		$('.delete').click(function(e){
			var 글번호 = e.target.dataset.id;
			var 지금누른거 = $(this);
			
			$.ajax({
				method : 'DELETE',
				url : '/delete',
				data : {_id :글번호}
			}).done(function(result){
				console.log('성공')
				지금누른거.parent('li').fadeOut();
				
			}).fail(function(result){
				
			});
			
		})


	AJAX 사용시 주의할점

서버가 요청을 성공했을때 반드시 메세지를 보내서 응답해줘야함.


	요청이 실패했을 경우

res.status(400)일 경우

			.fail(function(xhr, textStatus, errorThrown){
				console.log(xhr, textStatus, errorThrown)
			});

xhr : XMLHttpRequest
textStatus : 응답 코드 (왜 실패했는지)
errorThrown : 에러 메세지 출력

done의 경우 한개의 파라미터 : 요청시 받아온 결과 (파일 데이터등)

		$('.delete').click(function(e){
			var 글번호 = e.target.dataset.id;
			var 지금누른거 = $(this);
			
			$.ajax({
				method : 'DELETE',
				url : '/delete',
				data : {_id :글번호}
			}).done(function(result){
				console.log('성공')
				지금누른거.parent('li').fadeOut();
				
			}).fail(function(xhr, textStatus, errorThrown){
				console.log(xhr, textStatus, errorThrown);
			});
			
		})


	고객요청에 응답하는 법

1. res.send('<p>some html</p>')
: 간단한 문자나 HTML을 전송
2. res.status(404).send('Sorry, we cannot find that!')
: 응답코드를 전송
3. res.sendFile('/uploads/logo.png')
: static 파일을 전송
4. res.render('list.ejs', { ejs에 보낼 데이터 })
: render는 ejs등의 템플릿이 적용된 페이지들을 렌더링
5. res.json(제이슨데이터)
: json 데이터를 전송


	HTTP status codes

100~500 있음. 찾자

e.target이나 this 뒤에 jQuery 함수를 붙이고 싶다면 $()안에 싸메야 한다.

done() 안에 function(){}말고 ()=>{} 이런 함수로 변경해야 this값이 변형없이 잘됨.


특정 div 리로드 방법 

function refresh(){  
      $("#div의 id").load(window.location.href + "#div의 id");
}


(10강)
쇼핑몰처럼 상세페이지를 만들어보자 (URL parameter)

	게시물마다 상세페이지 만들기

app.get('/detail/:id', function(req,res){
	res.render('detail.ejs',{ 이런이름으로 : 이런데이터를 })
});

	URL 파라미터

'/detail/:id' : 이 :id 가 파라미터임. detail뒤에 /아무 문자열이나 오면 이 ejs파일을 보내라

req.params.id : URL의 파라미터 중에 id라고 이름 지은 파라미터의 값을 여기다가 넣어라

app.get('/detail/:id', function(req,res){
	db.collection('post').findOne({_id : req.params.id}, function(err,result){
		console.log(result)
		res.render('detail.ejs',{ data : result })
	})
});


요청과 응답의 변수가 숫자일 경우 문자로 치환되는 경우를 주의할 것.

app.get('/detail/:id', function(req,res){
	db.collection('post').findOne({_id : parseInt(req.params.id)}, function(err,result){
		console.log(result)
		res.render('detail.ejs',{ data : result })
	})
});


	<h4>제목 : <%= data.제목 %></h4>
	<h4>날짜 : <%= data.날짜 %></h4>


	delete요청의 경우도

 $.ajax({
     method: 'DELETE',
     url: '/delete',
     data: { _id: 1 },
})
: 기존 방식. 이런 식으로 data를 전달해서 req.body로 꺼내쓰도록 만들었는데

 $.ajax({
     method: 'DELETE',
     url: '/delete/1',
})
: 이런 식으로 url parameter로 원하는 데이터를 전달할 수도 있다.
상관은 없지만 delete 요청시에 이게 약간 더 자주 쓰는 사용법이다.
원래 delete 요청으로 data를 전달하는게 일반적이지는 않지만 보낼 정보가 길면 data로 전달.










	










