1) PM2 패키지 설치
npm install pm2 -g

(-g 옵션을 주어 전역으로 설치를 해주셔야 실행명령어로 사용하실 수 있습니다.)

2) PM2 사용법
 

(1) pm2 -version

역시 제일 기본적인 명령어인 버전 확인 명령입니다. 설치 후 잘 설치되었나 확인하실 때 사용하시면 됩니다.

(2) pm2 start example.js

PM2를 실행하는 명령어로 서버 소스코드가 작성되어 있는 js파일을 실행하시면 되겠습니다.

(실행 즉시 Daemon화 되어 종료하거나, 에러가 발생하지 않는 이상 24시간 계속 유지됩니다.)

 

* 유용한 옵션

--watch : PM2가 실행된 프로젝트의 변경사항을 감지하여 서버를 자동 리로드 해줍니다.

(서비스하기 전 개발 단계에서 js파일 같은 코드 파일이나 기타 정적 파일들을 수정할 시 변경사항이 수동으로 리로드를 하지 않아도 즉시 반영되므로 매우 편리합니다.)

-i max(코어개수) : Node.js의 싱글 스레드를 보완하기 위한 클러스터(Cluster) 모드입니다.

물론 코드 상으로 클러스터를 구현할 수도 있겠지만, PM2에서는 정말 간편하게 자체 옵션으로 클러스터 모드를 지원해 줍니다!

-i 뒤에 코어의 개수를 입력하거나 max를 쓰시면 최대 코어 개수로 클러스터링(Clustering) 됩니다.

(위의 PM2 사용 이유에서 언급했던 2번째 고민을 해결하실 수 있습니다.)


클러스터(Cluster) 모드로 실행 중인 PM2의 모습입니다.
(3) pm2 kill

start 명령과 반대로 실행 중인 PM2 Daemon을 종료시키는 명령입니다.

(4) pm2 log

실행 중인 PM2 Daemon의 log를 확인하는 명령입니다.

(터미널에서 작업 시 로그 확인을 다 하셨으면 컨트롤 + c를 눌러 빠져나오시면 됩니다.)

(5) pm2 monit

PM2로 실행한 서버의 상황을 한눈에 확인할 수 있는 화면으로 이동하는 명령입니다.

(터미널에서 작업 시 모니터 화면을 종료하시려면 q를 눌러 빠져나오실 수 있습니다.)


터미널에서의 PM2 모니터 화면입니다.
(6) pm2 startup + pm2 startup 명령의 결과로 출력된 명령(sudo env로 시작하는 명령) + pm2 save

이 명령은 pm2로 실행할 서버를 항상 자동으로 시작하게끔 부트 스크립트에 등록하는 명령입니다.

반드시 부트 스크립트에 등록하기 전 등록할 서버를 실행해 놓으셔야 하며, pm2 start up 명령을 사용하시면 터미널에 sudo env로 시작하는 명령어가 자동으로 생성되어 출력됩니다. 그렇게 출력되어 나온 명령어를 복사하셔서 그대로 붙여 넣은 뒤 입력해주시면 현재 실행 중인 pm2 서버가 부트 스크립트에 등록되게 됩니다. 그다음 pm2 save 명령으로 pm2 관련 변경사항을 저장해 주시면 되겠습니다.

(위의 PM2 사용 이유에서 언급했던 1번째 고민을 해결하실 수 있습니다.)

(7) pm2 unstartup + pm2 save

예상되시겠지만, 이 명령은 위의 명령과 반대로 부트 스크립트에 등록된 pm2 서버를 등록 해제시키는 명령입니다.

























